---
import { SITE } from "@config";
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Breadcrumbs from "@components/Breadcrumbs.astro";
import { getCollection, type CollectionEntry } from "astro:content";

// load all grammar entries (exclude drafts)
const allGrammar = await getCollection("grammar", e => !e.data.draft);

// sort by the grammar pattern
allGrammar.sort((a, b) =>
  (a.data.pattern ?? a.slug).localeCompare(b.data.pattern ?? b.slug)
);

// pagination
const perPage = 10;
const pageGrammar = allGrammar.slice(0, perPage);
const pageCount = Math.ceil(allGrammar.length / perPage);
---

<Layout title={`Grammar | ${SITE.title}`}>
  <Header activeNav="grammar" />

  <Breadcrumbs
    items={[
      { text: "Home", href: "/" },
      { text: "Grammar", href: "/grammar/" },
    ]}
  />

  <main id="main-content" class="py-12">
    <div class="lg:px-8 mx-auto max-w-4xl px-4 sm:px-6">
      <h1 class="mb-6 text-4xl font-bold">JLPT N2 Grammar List</h1>

      <div class="mb-8 text-lg">
        <p>
          <strong>How to use this list:</strong>
          This table shows common JLPT N2 grammar points. Click any pattern to see
          usage, example sentences, and pitfalls to avoid.
        </p>
      </div>

  <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
  {pageGrammar.map((entry: CollectionEntry<"grammar">) => (
    <div class="rounded-lg border border-skin-muted bg-skin-background p-4 shadow-sm hover:shadow-md transition">
      <a
        href={`/grammar/${entry.slug}/`}
        class="text-lg font-medium text-skin-accent hover:underline"
      >
        {entry.data.pattern ?? entry.slug}
      </a>

      <div class="mt-2 text-skin-base text-sm line-clamp-2">
        {Array.isArray(entry.data.meaning)
          ? entry.data.meaning.join(", ")
          : ((entry.data.meaning as any) ?? "—")}
      </div>

      {Array.isArray(entry.data.tags) && entry.data.tags.length > 0 && (
        <div class="mt-3 flex flex-wrap gap-2">
          {entry.data.tags.map((t: string) => {
            const slug = t
              .trim()
              .replace(/\s+/g, "-")
              .replace(/[^\p{Letter}\p{Number}-]/gu, "");
            return (
              <a
                href={`/tags/${slug}/`}
                class="text-xs text-skin-accent hover:underline"
              >
                #{t}
              </a>
            );
          })}
        </div>
      )}
    </div>
  ))}
</div>




      {
        pageCount > 1 && (
          <nav class="mt-6 flex justify-end space-x-4 text-skin-accent">
            <a href="/grammar/2/" class="hover:underline">
              Next →
            </a>
          </nav>
        )
      }
    </div>
  </main>

  <Footer />
</Layout>

<style>
  a {
    @apply relative hover:underline hover:decoration-dashed hover:-top-0.5 hover:text-skin-accent focus-visible:p-1;
  }
  a svg {
    @apply -mr-5 h-6 w-6 scale-95 text-skin-base opacity-80 group-hover:fill-skin-accent;
  }
</style>
