---
import { SITE } from "@config";
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Breadcrumbs from "@components/Breadcrumbs.astro";
import { getCollection } from "astro:content";
import getAllTags from "@utils/getAllTags";

const toSlug = (s: string) => {
  return s
    .trim()
    .replace(/\s+/g, "-") // collapse spaces to hyphen
    .replace(/[^\p{Letter}\p{Number}-]/gu, ""); // keep all letters/numbers/hyphen (Unicode-safe)
};

/* ---------- build static paths from all tags ---------- */
export async function getStaticPaths() {
  const tags = await getAllTags();
  return tags.map(({ tag, tagName }) => ({
    params: { tag },
    props: { tag, tagName },
  }));
}

/* ---------- tiny helpers ---------- */
const toArray = (v: unknown): string[] =>
  Array.isArray(v) ? (v as string[]) : v == null ? [] : [String(v)];
const text = (v: unknown, fallback = "—") => {
  const s = (v ?? "").toString().trim();
  return s.length ? s : fallback;
};
const hasTag = (tags: unknown[], wanted: string) =>
  Array.isArray(tags) && tags.some(t => toSlug(String(t)) === wanted);

function stripMarkdown(s: string): string {
  return s
    .replace(/`{1,3}[^`]*`{1,3}/g, "")
    .replace(/!\[[^\]]*]\([^)]+\)/g, "")
    .replace(/\[[^\]]*]\([^)]+\)/g, "")
    .replace(/<\/?[^>]+>/g, "")
    .replace(/[*_~>#-]/g, "")
    .replace(/\s+/g, " ")
    .trim();
}

/* ---------- page data ---------- */
const { tag, tagName } = Astro.props;

const [blog, vocabulary, grammar] = await Promise.all([
  getCollection("blog", e => !e.data.draft).catch(() => []),
  getCollection("vocabulary", e => !e.data.draft).catch(() => []),
  getCollection("grammar", e => !e.data.draft).catch(() => []),
]);

type Row = {
  type: "blog" | "vocabulary" | "grammar";
  href: string;
  left: string; // title/headword/pattern
  mid: string; // reading/connection/— (2nd column)
  tags: string[];
  right: string; // meaning(s) or blog excerpt (4th column)
};

const rows: Row[] = [];

/* Vocabulary rows */
for (const it of vocabulary as any[]) {
  const d = it.data ?? {};
  if (!hasTag(d.tags, tag)) continue;
  rows.push({
    type: "vocabulary",
    href: `/vocabulary/${it.slug}/`,
    left: text(d.headword ?? d.title ?? it.slug),
    mid: toArray(d.reading).join("、") || "—",
    tags: toArray(d.tags),
    right: toArray(d.meaning).join(", ") || text(d.description, "—"),
  });
}

/* Grammar rows */
for (const it of grammar as any[]) {
  const d = it.data ?? {};
  if (!hasTag(d.tags, tag)) continue;
  rows.push({
    type: "grammar",
    href: `/grammar/${it.slug}/`,
    left: text(d.pattern ?? d.title ?? it.slug),
    mid: text(d.connection, "—"),
    tags: toArray(d.tags),
    right: toArray(d.meaning).join(", ") || text(d.description, "—"),
  });
}

/* Blog rows — prefer description/excerpt, else derive from body */
for (const it of blog as any[]) {
  const d = it.data ?? {};
  if (!hasTag(d.tags, tag)) continue;

  const desc = text(d.description ?? d.excerpt, "");
  let bodySnippet = "";
  if (!desc && typeof it.body === "string") {
    const raw = stripMarkdown(it.body);
    bodySnippet = raw.length > 160 ? raw.slice(0, 160) + "…" : raw;
  }

  rows.push({
    type: "blog",
    href: `/blog/${it.slug}/`,
    left: text(d.title ?? it.slug),
    mid: "—",
    tags: toArray(d.tags),
    right: desc || bodySnippet || "—",
  });
}

/* Sort: alphabetically by left column */
rows.sort((a, b) => a.left.localeCompare(b.left, "en"));
---

<Layout title={`#${tagName ?? tag} | ${SITE.title}`}>
  <Header activeNav="vocabulary" />

  <Breadcrumbs
    items={[
      { text: "Home", href: "/" },
      { text: "Tags", href: "/tags/" },
      { text: `#${tagName ?? tag}`, href: `/tags/${tag}/` },
    ]}
  />

  <main id="main-content" class="py-12">
    <div class="lg:px-8 mx-auto max-w-4xl px-4 sm:px-6">
      <h1 class="mb-6 text-4xl font-bold">Tag: #{tagName ?? tag}</h1>

      <div class="lg:grid-cols-3 grid gap-6 sm:grid-cols-2">
        {
          rows.length === 0 ? (
            <div class="border-skin-muted bg-skin-background text-skin-muted col-span-full rounded-lg border p-6 text-center">
              No entries for this tag yet.
            </div>
          ) : (
            rows.map(r => (
              <div class="border-skin-muted bg-skin-background rounded-lg border p-4 shadow-sm transition hover:shadow-md">
                <a
                  href={r.href}
                  class="text-lg font-medium text-skin-accent hover:underline"
                >
                  {r.left}
                </a>

                <div class="text-skin-muted mt-1 text-md uppercase tracking-wide">
                  {r.type}
                </div>

                <div class="mt-2 line-clamp-2 text-md text-skin-base">
                  {r.right}
                </div>

                {r.tags.length > 0 && (
                  <div class="mt-3 flex flex-wrap gap-2">
                    {r.tags.map(t => (
                      <a
                        href={`/tags/${toSlug(t)}/`}
                        class="text-md text-skin-accent hover:underline"
                      >
                        #{t}
                      </a>
                    ))}
                  </div>
                )}
              </div>
            ))
          )
        }
      </div>
    </div>
  </main>

  <Footer />
</Layout>

<style>
  a {
    @apply relative hover:underline decoration-dashed hover:-top-0.5 hover:text-skin-accent focus-visible:p-1;
  }
  a svg {
    @apply -mr-5 h-6 w-6 scale-95 text-skin-base opacity-80 group-hover:fill-skin-accent;
  }
</style>
